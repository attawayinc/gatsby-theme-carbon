name: release-it

on:
  schedule:
    # Run weekly on Monday at 1:00 AM UTC
    - cron: '0 1 * * 1'
  workflow_dispatch:
    # Enable manual triggering from the GitHub UI
    inputs:
      # No inputs needed, but we need to specify the branches filter
    branches:
      - main

# Set default permissions as restrictive as possible
permissions: {}

jobs:
  check-user:
    runs-on: ubuntu-latest
    permissions: {} # No permissions needed for user check
    # Only run this check for workflow_dispatch events
    if:
      github.event_name == 'workflow_dispatch' &&
      contains('["alisonjoseph","vpicone", "sstrubberg", "jnm2377", "eng618"]',
      github.actor)
    steps:
      - name: User validation
        run:
          echo "User ${{ github.actor }} is authorized to trigger this workflow"

  # For workflow_dispatch events - depends on check-user
  check-for-new-commits-manual:
    runs-on: ubuntu-latest
    needs: check-user
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      actions: read
    outputs:
      has_new_commits: ${{ steps.check-commits.outputs.has_new_commits }}
    steps:
      - name: Check for new commits since last successful release
        id: check-commits
        uses: actions/github-script@v7
        with:
          script: |
            // Get the current workflow ID
            const { data: workflows } = await github.rest.actions.listRepoWorkflows({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const currentWorkflow = workflows.workflows.find(w => w.name === 'release-it' || w.path.includes('release.yml'));
            if (!currentWorkflow) {
              console.log('Could not find the current workflow');
              core.setOutput('has_new_commits', 'true');
              return;
            }

            // Get the last successful run of this workflow
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: currentWorkflow.id,
              status: 'success',
              branch: 'main',
              per_page: 1
            });

            if (runs.total_count === 0) {
              console.log('No previous successful runs found, proceeding with release');
              core.setOutput('has_new_commits', 'true');
              return;
            }

            const lastSuccessfulRun = runs.workflow_runs[0];
            const lastSuccessfulCommit = lastSuccessfulRun.head_sha;
            console.log(`Last successful release commit: ${lastSuccessfulCommit}`);

            // Get the latest commit on main branch
            const { data: branch } = await github.rest.repos.getBranch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: 'main'
            });

            const latestCommit = branch.commit.sha;
            console.log(`Latest commit on main: ${latestCommit}`);

            if (lastSuccessfulCommit === latestCommit) {
              console.log('No new commits since last successful release, skipping workflow');
              core.setOutput('has_new_commits', 'false');
              return;
            }

            // Compare commits to see if there are any changes
            const { data: comparison } = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: lastSuccessfulCommit,
              head: latestCommit
            });

            const hasNewCommits = comparison.total_commits > 0;
            console.log(`Total new commits since last release: ${comparison.total_commits}`);
            core.setOutput('has_new_commits', hasNewCommits ? 'true' : 'false');

      - name: Debug commits check
        run: |
          echo "::group::Debug commits check outputs"
          echo "has_new_commits: ${{ steps.check-commits.outputs.has_new_commits }}"
          echo "job status: ${{ job.status }}"
          echo "::endgroup::"

  # For scheduled events - no dependency
  check-for-new-commits-scheduled:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    permissions:
      contents: read
      actions: read
    outputs:
      has_new_commits: ${{ steps.check-commits.outputs.has_new_commits }}
    steps:
      - name: Check for new commits since last successful release
        id: check-commits
        uses: actions/github-script@v7
        with:
          script: |
            // Get the current workflow ID
            const { data: workflows } = await github.rest.actions.listRepoWorkflows({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const currentWorkflow = workflows.workflows.find(w => w.name === 'release-it' || w.path.includes('release.yml'));
            if (!currentWorkflow) {
              console.log('Could not find the current workflow');
              core.setOutput('has_new_commits', 'true');
              return;
            }

            // Get the last successful run of this workflow
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: currentWorkflow.id,
              status: 'success',
              branch: 'main',
              per_page: 1
            });

            if (runs.total_count === 0) {
              console.log('No previous successful runs found, proceeding with release');
              core.setOutput('has_new_commits', 'true');
              return;
            }

            const lastSuccessfulRun = runs.workflow_runs[0];
            const lastSuccessfulCommit = lastSuccessfulRun.head_sha;
            console.log(`Last successful release commit: ${lastSuccessfulCommit}`);

            // Get the latest commit on main branch
            const { data: branch } = await github.rest.repos.getBranch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: 'main'
            });

            const latestCommit = branch.commit.sha;
            console.log(`Latest commit on main: ${latestCommit}`);

            if (lastSuccessfulCommit === latestCommit) {
              console.log('No new commits since last successful release, skipping workflow');
              core.setOutput('has_new_commits', 'false');
              return;
            }

            // Compare commits to see if there are any changes
            const { data: comparison } = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: lastSuccessfulCommit,
              head: latestCommit
            });

            const hasNewCommits = comparison.total_commits > 0;
            console.log(`Total new commits since last release: ${comparison.total_commits}`);
            core.setOutput('has_new_commits', hasNewCommits ? 'true' : 'false');

      - name: Debug commits check
        run: |
          echo "::group::Debug commits check outputs"
          echo "has_new_commits: ${{ steps.check-commits.outputs.has_new_commits }}"
          echo "job status: ${{ job.status }}"
          echo "::endgroup::"

  check-validate-status:
    runs-on: ubuntu-latest
    needs: [check-for-new-commits-manual, check-for-new-commits-scheduled]
    permissions:
      actions: read # Required for checking workflow status
      contents: read # Required for accessing repo content
    if:
      always() && (needs.check-for-new-commits-manual.result == 'success' &&
      needs.check-for-new-commits-manual.outputs.has_new_commits == 'true') ||
      (needs.check-for-new-commits-scheduled.result == 'success' &&
      needs.check-for-new-commits-scheduled.outputs.has_new_commits == 'true')
    outputs:
      status: ${{ steps.check-validate.outputs.status }}
    steps:
      - name: Check Validate workflow status
        id: check-validate
        uses: actions/github-script@v7
        with:
          script: |
            const workflow_name = 'Validate';
            const branch = 'main';

            const { data: workflows } = await github.rest.actions.listRepoWorkflows({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const workflow = workflows.workflows.find(w => w.name === workflow_name);
            if (!workflow) {
              core.setFailed(`Couldn't find workflow named "${workflow_name}"`);
              return;
            }

            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: workflow.id,
              branch: branch,
              status: 'completed',
              per_page: 1
            });

            if (runs.total_count === 0) {
              core.setFailed(`No completed runs found for workflow "${workflow_name}" on branch "${branch}"`);
              return;
            }

            const latestRun = runs.workflow_runs[0];
            console.log(`Latest ${workflow_name} run conclusion: ${latestRun.conclusion}`);

            // Set the output directly
            core.setOutput('status', latestRun.conclusion);

            if (latestRun.conclusion !== 'success') {
              core.setFailed(`Latest ${workflow_name} run did not succeed. Status: ${latestRun.conclusion}`);
            }

      - name: Debug dependencies
        run: |
          echo "::group::Debug dependencies"
          echo "manual commits check result: ${{ needs.check-for-new-commits-manual.result }}"
          echo "manual commits has_new_commits: ${{ needs.check-for-new-commits-manual.outputs.has_new_commits }}"
          echo "scheduled commits result: ${{ needs.check-for-new-commits-scheduled.result }}"
          echo "scheduled commits has_new_commits: ${{ needs.check-for-new-commits-scheduled.outputs.has_new_commits }}"
          echo "::endgroup::"

      - name: Debug output status
        run: |
          echo "::group::Debug check-validate-status outputs"
          echo "Job result: ${{ job.status }}"
          echo "Step result: ${{ steps.check-validate.outcome }}"
          echo "Status output: ${{ steps.check-validate.outputs.status }}"
          echo "Raw conclusion: ${{ steps.check-validate.outputs.status }}"
          echo "::endgroup::"

  release:
    runs-on: ubuntu-latest
    needs: check-validate-status
    if: |
      needs.check-validate-status.result == 'success' &&
      needs.check-validate-status.outputs.status == 'success'
    # Needed as recommended by npm docs on publishing with provenance https://docs.npmjs.com/generating-provenance-statements
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Debug Conditions
        run: |
          echo "::group::Debug release conditions"
          echo "check-validate-status job result: ${{ needs.check-validate-status.result }}"
          echo "check-validate-status job status: ${{ needs.check-validate-status.outputs.status }}"
          echo "Direct check-validate step status: ${{ needs.check-validate-status.outputs['check-validate'].outputs.status }}"
          echo "::endgroup::"

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          registry-url: https://registry.npmjs.org

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Initialize Git user
        run: |
          git config --global user.name "Eric N. Garcia"
          git config --global user.email "eng618@garciaericn.com"

      - name: Initialize the NPM config
        run: |
          npm config set //registry.npmjs.org/:_authToken=$NPM_TOKEN
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts
        env:
          SSH_PRIVATE_KEY: ${{ SECRETS.SSH_PRIVATE_KEY }}

      - name: Run release command
        run: yarn release:ci
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
